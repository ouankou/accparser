#pragma acc parallel loop gang worker private (a, b, c)
#pragma acc parallel loop gang worker (num: 6)
#pragma acc parallel loop gang worker (16)
#pragma acc parallel loop private (a, b, c) num_gangs (6)
#pragma acc parallel loop async (5)
#pragma acc parallel loop attach (a, b, c)
#pragma acc parallel loop copy (a, b, c)
#pragma acc parallel loop copyin (x[0 : N], y[0:M])
#pragma acc parallel loop copyin (readonly: m, n)
#pragma acc parallel loop copyin (readonly: m, n, readonly)
#pragma acc parallel loop copyin (readonly: readonly::m, n, readonly)
#pragma acc parallel loop default (present)
#pragma acc parallel loop deviceptr (a, b, c)
#pragma acc parallel loop firstprivate (a, b, c)
#pragma acc parallel loop no_create (a, b, c)
#pragma acc parallel loop num_workers (6)
#pragma acc parallel loop present (a, b, c)
#pragma acc parallel loop vector_length (512)
#pragma acc parallel loop wait (12, 23, 34)
#pragma acc parallel loop copyout (12, 23, 34)
#pragma acc parallel loop copyout (zero: 12, 23, 34)
#pragma acc parallel loop copyout (zero: 12, 23, 34, zero)
#pragma acc parallel loop copyout (zero: zero::12, 23, 34)
#pragma acc parallel loop create (12, 23, 34)
#pragma acc parallel loop create (zero: 12, 23, 34)
#pragma acc parallel loop create (zero: 12, 23, 34, zero)
#pragma acc parallel loop create (zero: zero::12, 23, 34)
#pragma acc parallel loop if (5)
#pragma acc parallel loop if (x==3)
#pragma acc parallel loop self (5)
#pragma acc parallel loop self (x==3)
#pragma acc parallel loop device_type (x, y, z)
#pragma acc parallel loop reduction (+: x, y, z)
#pragma acc parallel loop reduction (*: x, y, z)
#pragma acc parallel loop reduction (max: x, y, z)
#pragma acc parallel loop reduction (max: x, y, max)
#pragma acc parallel loop reduction (max: max, y, z)
#pragma acc parallel loop reduction (max: max::x, y, max)
#pragma acc parallel loop reduction (max: max::x, max, max::y)
#pragma acc parallel loop reduction (min: x, y, z)
#pragma acc parallel loop reduction (min: x, y, min)
#pragma acc parallel loop reduction (min: min, y, z)
#pragma acc parallel loop reduction (min: min::x, y, min)
#pragma acc parallel loop reduction (min: min::x, min, min::y)
#pragma acc parallel loop reduction (&: x[5], y, z)
#pragma acc parallel loop reduction (|: x, y, z)
#pragma acc parallel loop reduction (^: x, y, z)
#pragma acc parallel loop reduction (&&: x, y, z)
#pragma acc parallel loop reduction (||: x, y, z)
#pragma acc parallel loop copyin (readonly: x, y, z, a, b, c)
#pragma acc parallel loop copyin (readonly: x, y, z, a, b, c, 1, 2, 3)
#pragma acc parallel loop copyin (x, y, z) copyin (readonly: a, b, c)
#pragma acc parallel loop copyin (readonly: x, y, z) copyin (a, b, c)
#pragma acc parallel loop copyin (x, y, z, a, b, c)
#pragma acc parallel loop copyout (zero: x, y, z, a, b, c)
#pragma acc parallel loop copyout (zero: x, y, z, a, b, c, 1, 2, 3)
#pragma acc parallel loop copyout (x, y, z) copyout (zero: a, b, c)
#pragma acc parallel loop copyout (zero: x, y, z) copyout (a, b, c)
#pragma acc parallel loop copyout (x, y, z, a, b, c)
#pragma acc parallel loop create (zero: x, y, z, a, b, c)
#pragma acc parallel loop create (zero: x, y, z, a, b, c, 1, 2, 3)
#pragma acc parallel loop create (x, y, z) create (zero: a, b, c)
#pragma acc parallel loop create (zero: x, y, z) create (a, b, c)
#pragma acc parallel loop create (x, y, z, a, b, c)
#pragma acc parallel loop reduction (+: x, y, z, a, b, c)
#pragma acc parallel loop reduction (+: x, y, z) reduction (*: a, b, c)
#pragma acc parallel loop reduction (max: x, y, z) reduction (min: a, b, c)
#pragma acc parallel loop reduction (min: x, y, z, a, b, c)
#pragma acc parallel loop reduction (min: x, y, z) reduction (&&: a, b, c)
#pragma acc parallel loop reduction (||: x, y, z) reduction (&&: a, b, c)
#pragma acc parallel loop reduction (&&: x, y, z, a, b, c)
#pragma acc parallel loop reduction (max: x, y, max, min)
#pragma acc parallel loop copyin (readonly: x, y, z) copyout (zero: x, y, z) create (zero: x, y, z) reduction (+: x, y, z)
#pragma acc parallel loop async (expression1) async (expression2) async (expression3)
#pragma acc parallel loop async (expression1) async (expression2)
#pragma acc parallel loop async (expression1) async
#pragma acc parallel loop async async (expression1)
#pragma acc parallel loop num_workers (expression1) num_workers (expression2) num_workers (expression3)
#pragma acc parallel loop num_workers (expression1) num_workers (expression2)
#pragma acc parallel loop vector_length (expression1) vector_length (expression2) vector_length (expression3)
#pragma acc parallel loop vector_length (expression1) vector_length (expression2)
#pragma acc parallel loop self (expression1) self (expression2) self (expression3)
#pragma acc parallel loop self (expression1) self (expression2)
#pragma acc parallel loop self (expression1) self
#pragma acc parallel loop self self (expression1)
#pragma acc parallel loop num_gangs (expression1) num_gangs (expression2) num_gangs (expression3)
#pragma acc parallel loop num_gangs (expression1) num_gangs (expression2)
#pragma acc parallel loop wait wait (a, b, c, d)
#pragma acc parallel loop 
#pragma acc parallel loop private (a, b, c)
#pragma acc parallel loop auto
#pragma acc parallel loop auto
#pragma acc parallel loop collapse (1)
#pragma acc parallel loop collapse (1) collapse (2)
#pragma acc parallel loop collapse (1) collapse (2)
#pragma acc parallel loop device_type (a, b, c)
#pragma acc parallel loop gang
#pragma acc parallel loop gang (a, b, c)
#pragma acc parallel loop gang (a, b, c, d)
#pragma acc parallel loop gang (a, b, c) gang
#pragma acc parallel loop gang gang (a, b, c, d)
#pragma acc parallel loop independent
#pragma acc parallel loop independent
#pragma acc parallel loop seq
#pragma acc parallel loop vector (length: a)
#pragma acc parallel loop vector (length: a) vector (length: b)
#pragma acc parallel loop vector (length: a)
#pragma acc parallel loop vector (c) vector (length: c)
#pragma acc parallel loop vector (c) vector (b)
#pragma acc parallel loop vector (c)
#pragma acc parallel loop worker (num: a)
#pragma acc parallel loop worker (num: a) worker (num: b)
#pragma acc parallel loop worker (num: a)
#pragma acc parallel loop worker (c) worker (num: c)
#pragma acc parallel loop worker (c) worker (b)
#pragma acc parallel loop worker (c)
#pragma acc parallel loop tile (1)
#pragma acc parallel loop tile (1, 2)
#pragma acc parallel loop tile (1, 1, 2)
#pragma acc parallel loop tile (1, 1, 2) worker (num: a) worker (num: 5) independent collapse (1)
